[ { "title": "객체지향의 원리", "url": "/posts/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%9D%98%EC%9B%90%EB%A6%AC/", "categories": "designpattern", "tags": "oop, designpattern", "date": "2021-05-12 17:23:00 +0900", "snippet": "추상화추상화를 수행하는 이유는 어떤 대상들의 공통적인 특징을 뽑아내서 정의하고 대상의 관심있는 부분을 정리함으로써 대상의 세세한 부분까지 신경쓰지 않아도 되기 때문입니다. 예를 들어, 카페 관련 정보 앱을 개발한다고 생각하면 스타벅스의 내부 인테리어, 의자 개수, 종업원의 유니폼 같은 세세한 정보를 일일이 관심을 가지는 것 보단 카페의 보편적인 매장 위치, 취급 품목, 전화번호 같은 정보에 관심을 가지는 것이 더 효율적일 것입니다. 반면, 조금만 다르게 추상화를 수행할수도 있습니다.스타벅스, 이디야, 빽다방, … -&amp;..." }, { "title": "[프로그래머스] 디스크 컨트롤러 풀이", "url": "/posts/%EB%94%94%EC%8A%A4%ED%81%AC%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC/", "categories": "algorithm", "tags": "heap, implementation", "date": "2021-04-14 15:09:00 +0900", "snippet": "디스크 컨트롤러 풀이 (힙, 우선순위 큐 사용)프로그래머스 Lv 3 문제로 힙을 사용하여 효과적으로 풀 수 있습니다. 하지만 힙을 사용하기 전에 다음을 명확히 하는 것이 좋습니다. 문제에 주어진 예시로 봤을 때 (0, 3), (2, 6), (1, 9) 으로 작업을 처리했을 때 평균 처리시간이 제일 적은 것을 알 수 있습니다. 이로써 도출할 수 있는 포인트는 “겹치는 작업이 있을 때 제일 처리시간이 작은 작업 (대기시간을 적게 하는 방향)”을 기준으로 힙을 활용해야 합니다. 문제 제시 조건으로 “하드디스크가 작업을 수행하고 있지..." }, { "title": "크루스칼 알고리즘", "url": "/posts/%ED%81%AC%EB%A3%A8%EC%8A%A4%EC%B9%BC%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/", "categories": "algorithm", "tags": "graph, kruskal, unionfind", "date": "2021-04-13 14:43:00 +0900", "snippet": "크루스칼 알고리즘그래프 이론에서 모든 노드 정점을 연결하는 방법입니다. 최소 스패닝트리 라고도 불립니다. 가장 비용이 적은 간선부터 이미 연결돼 있는 노드인지 확인하며 트리를 완성합니다. 아래는 작은 그래프 예시를 들었습니다. 최소 스패닝트리 1, 2를 보시면 최소 비용 4로 모두 동일하지만 그래프 모양은 다릅니다. 이처럼 경우에 따라 스패닝트리가 여러개 있을 수 있습니다.알고리즘 구현이를 코드로 구현하는 법은 비유하자면 다음과 같습니다. 전국 일주 경로를 짜야할 때 각 지역을 연결하는 운송수단과 비용이 적힌 티켓이 있습니다...." }, { "title": "디자인패턴을 이해하기 위한 기초, 관계 이해", "url": "/posts/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4-UML-%EA%B4%80%EA%B3%84%EC%9D%B4%ED%95%B4/", "categories": "designpattern", "tags": "uml, designpattern", "date": "2021-04-12 21:55:00 +0900", "snippet": "클래스 다이어그램에서의 관계의 종류UML 다이어그램 종류 중 클래스 다이어그램은 시스템을 구성하는 클래스들 사이의 관계를 표현합니다. 요구 분석부터 설계, 구현 단계까지 폭넓게 사용되는 다이어그램입니다.그 중에서 클래스들 사이의 관계에 대해 자세히 알아보겠습니다. 크게 연관, 일반화, 집합, 의존, 인터페이스 책임 관계로 나누어집니다.   연관 관계 일반화 관계 집합 관계 의존 관계 인터페이스 책임 관계 설명 클래스간에 연관..." }, { "title": "[책 후기]스프링부트와 AWS로 혼자 구현하는 웹 서비스를 읽고나서", "url": "/posts/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8%EC%99%80-aws%EB%A1%9C-%ED%98%BC%EC%9E%90-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/", "categories": "books", "tags": "springboot, spring", "date": "2021-02-16 15:36:00 +0900", "snippet": "스프링부트와 AWS로 혼자 구현하는 웹 서비스를 읽고나서 이 책을 읽기 전 저는 현재 취준생으로써 AWS를 활용한 기본적인 인프라지식과, Node.js 기반의 간단한 웹 프로그래밍 프로젝트를 수행한 경험이 있었고, 대기업 백엔드의 대부분을 차지하고 있는 Spring 프레임워크에 관심이 생겨 구매하여 읽게 되었습니다.좋았던 점 실습 내용간의 생략되는 부분이 없다. 프로그래밍의 영역에만 국한되는 것이 아니라 웹서비스 배포를 위한 시스템까지 커버한다. 기술 사용시 다른 선택지가 어떤 것이 있는지 제시하였고 각 장단점이 설명되..." }, { "title": "자바스크립트로 리팩터링 하기, 코드 테스트 환경 구축", "url": "/posts/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%A6%AC%ED%8C%A9%ED%84%B0%EB%A7%811/", "categories": "software", "tags": "refactoring", "date": "2020-11-25 23:22:00 +0900", "snippet": "리팩터링리팩터링을 수행하는 이유는 다음과 같습니다 빠른 개발 좋은 설계 유지,보수성, 가독성이 좋아짐사실 좋은 설계로 인해 자연스레 따라오는 장점들 같습니다. 그럼 리팩터링의 정의는 뭘까요? 코드의 핵심적인 기능은 유지하되, 코드의 구조를 변경함으로써 소프트웨어의 설계, 가독성, 유지 보수성을 높이는 작업저같은 초보 개발자는 토이 프로젝트나, 팀을 이루어 프로젝트를 진행할 때 소프트웨어 기능 자체에 집중을 하다보니 확장성을 고려한 코드를 작성하기 힘들었습니다. 특히 외부 라이브러리 (Axios: 비동기 통신)를 프론트엔..." }, { "title": "WebRTC에 대한 이해", "url": "/posts/WEBRTC/", "categories": "API", "tags": "WebRTC", "date": "2020-11-20 11:30:00 +0900", "snippet": "WebRTC 란 WebRTC(Web Real-Time Communication)은 웹 애플리케이션과 사이트가 중간자 없이 브라우저 간에 오디오나 영상 미디어를 포착하고 마음대로 스트림할 뿐 아니라, 임의의 데이터도 교환할 수 있도록 하는 기술입니다. WebRTC를 구성하는 일련의 표준들은 플러그인이나 제 3자 소프트웨어 설치 없이 종단 간 데이터 공유와 화상 회의를 가능하게 합니다. 이를 위하여 WebRTC는 상호 연관된 API와 프로토콜로 구성되어 함께 작동합니다. 이 문서에서는 WebRTC의 기본을 이해하고, 설정하며,..." }, { "title": "AI 도메인에 대한 이해", "url": "/posts/AI%EB%8F%84%EB%A9%94%EC%9D%B8%EC%9D%B4%ED%95%B4/", "categories": "AI", "tags": "AI, IoT", "date": "2020-11-20 11:30:00 +0900", "snippet": "AI 에 대한 이해이번 포스팅은 멀티캠퍼스 융복합프로젝트를 진행하면서 AI, IoT, 빅데이터, 클라우드 공부를 한 학생들이 서로의 도메인에 대한 이해를 높이기 위해 조사한 글입니다. 프로젝트를 진행하면서 AI가 무엇을 할 수 있는지? 무엇이 필요한지? 어디에서 정보들을 찾을 수 있는지? 를 중점으로 정리한 글입니다.인공지능 기술의 발전은 기존 프로그래밍과는 패러다임을 다르게 하여 개발자가 프로그램 규칙을 정해주는 것이 아니라, 데이터를 토대로 인공지능을 학습 시키면 스스로 규칙을 찾아냅니다. 거기에 더해 딥러닝 기술은 인간의..." }, { "title": "S3 정적호스팅 github actions 사용하여 자동 배포", "url": "/posts/Github-actions/", "categories": "cloud", "tags": "github, s3, actions", "date": "2020-11-18 11:30:00 +0900", "snippet": "정적호스팅정적 호스팅 하는 방법 에서 Vue 앱을 웹팩으로 빌드하고 dist 폴더 아래의 파일을 aws s3 버킷에 업로드하여 호스팅했습니다. 오늘은 개발자의 컴퓨터에서 깃헙으로 푸쉬하면 자동으로 빌드를 수행하고 s3 버킷에 파일을 업로드 하는 작업을 자동화하겠습니다. 이를 구현하기 위해서, aws codepipeline, aws codebuild, travis-ci 등 다양한 도구가 있으나, 저는 관리 포인트를 최소화하기 위해 github actions 도구를 사용했습니다.github actions 란? Automate y..." }, { "title": "DynamoDB 기존 테이블에 Item 업데이트 하기", "url": "/posts/DynamoDB/", "categories": "cloud", "tags": "database, dynamodb, aws sdk, boto3", "date": "2020-11-15 23:30:00 +0900", "snippet": "DynamoDB Amazon DynamoDB는 어떤 규모에서도 10밀리초 미만의 성능을 제공하는 키-값 및 문서 데이터베이스입니다. 완전관리형의 내구성이 뛰어난 다중 리전, 다중 마스터 데이터베이스로서, 인터넷 규모 애플리케이션을 위한 보안, 백업 및 복원, 인 메모리 캐싱 기능을 기본적으로 제공합니다. DynamoDB는 하루에 10조 개 이상의 요청을 처리할 수 있고, 초당 2,000만 개 이상의 피크 요청을 지원할 수 있습니다. Lyft, Airbnb, Redfin 등과 같이 세계에서 가장 빠르게 성장하는 다수의 비즈니..." }, { "title": "API Gateway에서 람다로 쿼리스트링 넘겨주기", "url": "/posts/API-Gateway/", "categories": "cloud", "tags": "API Gateway, lambda", "date": "2020-11-13 20:30:00 +0900", "snippet": "API Gateway에서 람다함수로 쿼리스트링 전달하기import boto3import jsonfrom boto3.dynamodb.conditions import Key, Attrdef lambda_handler(event, context): ... response = table.query( KeyConditionExpression=Key(&#39;product_code&#39;).eq(event[&quot;product_code&quot;]) ) ... retu..." }, { "title": "Vue 컴포넌트간 통신(event)", "url": "/posts/Vue.js-5/", "categories": "frontend", "tags": "vue, vuejs, component, props, event, emit", "date": "2020-11-11 17:30:00 +0900", "snippet": "Vue 컴포넌트간 통신뷰 앱은 컴포넌트의 트리 구조로 이루어져 있습니다. 동등한 경로에 있는 컴포넌트는 부모 컴포넌트의 data나 vuex를 통해 통신할 수 있습니다. 오늘은 이벤트를 중점으로 포스팅하겠습니다.코드로 보면서 말씀드리겠습니다.// Home.vue&amp;lt;template&amp;gt; &amp;lt;GlobalNavigation&amp;gt;&amp;lt;/GlobalNavigation&amp;gt; &amp;lt;Autocomplete&amp;gt;&amp;lt;/Autocomplete&amp;gt; &am..." }, { "title": "AWS S3에 Vue.js앱 정적호스팅하기", "url": "/posts/s3-hosting/", "categories": "frontend", "tags": "vue, vuejs, s3, aws, 정적호스팅", "date": "2020-11-10 22:43:00 +0900", "snippet": "정적 호스팅우리가 만든 뷰앱은 알고보면 모두 html, css, javascript 들로 이루어진 정적 파일 뿐 입니다. 이 점을 활용하여 Amazon S3의 정적호스팅을 활용하면 Vue 애플리케이션을 호스팅 할 수 있습니다.순서는 다음과 같습니다. Vue cli로 vue 앱 생성 S3 버킷 생성 Npm run build 후 dist 폴더 버킷에 업로드 정적 호스팅 기능 활성화 퍼블릭 접근 허용 및 버킷 정책 개선으로 오류 해결 확인순서는 위와 같으나 먼저 S3 버킷을 생성하시고 vue 앱을 업로드 하셔도 무방합니다..." }, { "title": "CSS 주요 내용 정리", "url": "/posts/css%EC%A0%95%EB%A6%AC/", "categories": "frontend", "tags": "css", "date": "2020-11-09 15:31:00 +0900", "snippet": "CSS 정리CSS는 과거에도 그랬고 현재에도 그렇고 익숙해지기 힘든 도구이다. HTML을 마크업 한뒤 CSS로 스타일링한다는 매우 간단해 보이지만, 막상 원하는 대로 사이트를 마크업하려면 쉽게 손이 움직이지 않는다. 이 글은 좀더 CSS 기본 원리에 익숙해지고 활용하기 위해 인터넷 강의를 듣고 정리한 글입니다.boxHTML의 모든 요소들은 box로 구성되어 있습니다. 동그란 모양의 이미지이더라도 내부적으로 보면 box형태를 띄고 있습니다. 그리고 모든 box들은 margin - border - padding - content ..." }, { "title": "AWS API Gateway에서 CORS 해결하기", "url": "/posts/CORS/", "categories": "frontend", "tags": "cors, javascript", "date": "2020-11-05 19:31:00 +0900", "snippet": "CORS기능적 개요 교차 출처 리소스 공유 표준은 웹 브라우저에서 해당 정보를 읽는 것이 허용된 출처를 서버에서 설명할 수 있는 새로운 HTTP 헤더를 추가함으로써 동작합니다. 추가적으로, 서버 데이터에 부수 효과(side effect)를 일으킬 수 있는 HTTP 요청 메서드(GET을 제외한 HTTP 메서드)에 대해, CORS 명세는 브라우저가 요청을 OPTIONS 메서드로 “프리플라이트”(preflight, 사전 전달)하여 지원하는 메서드를 요청하고, 서버의 “허가”가 떨어지면 실제 요청을 보내도록 요구하고 있습니다. 또한..." }, { "title": "Vue.js 개발할 때 같이 사용하면 좋은 라이브러리", "url": "/posts/Vue.js-4/", "categories": "frontend", "tags": "vue, vue.js, javascript", "date": "2020-11-02 16:58:00 +0900", "snippet": "오늘은 Vuex, Axios에 대해 알아 보겠습니다. Vuex는 상태관리라이브러리 입니다. React 진영의 Redux와 유사합니다. 중앙 집중 방식의 애플리케이션 상태관리자로서 역할을 수행합니다. 공식가이드에는 대규모 애플리케이션을 제외하곤 그닥 성능상 이득을 볼 게 없다라고 적혀있지만, 컴포넌트간의 중복 문제 해결, 가독성, 일치성으로 인해 꼭 사용해야하는 라이브러리입니다. Vuex는 Vue의 핵심 라이브러리이기도 합니다.반면, Axios는 우리의 뷰앱이 서버와 비동기통신을 할 때 사용하는 라이브러리입니다. 즉 자바스크립트..." }, { "title": "Vue.js 컴포넌트 개발", "url": "/posts/Vue.js-3/", "categories": "frontend", "tags": "vue, vue.js, javascript", "date": "2020-10-30 22:55:00 +0900", "snippet": "오늘은 뷰의 컴포넌트에 대해 알아보겠습니다. 뷰는 앱이 실행될 때 루트 컴포넌트에서 시작하여 컴포넌트들의 트리로 구성됩니다. 이 말은 곧 화면을 기능단위로 쪼개는 것을 의미합니다. 잘 만들어진 컴포넌트는 재사용성을 높이고, 유지 보수하기 쉬워집니다.규모가 작은 애플리케이션을 설계 할 때는 강박적으로 적용할 필요는 없지만, 보통 회원가입, 게시물 CRUD를 정도 이상의 웹 사이트를 만들 땐그럼 컴포넌트 개발에 앞서 어떻게 설계해야 할 지 먼저 알아보겠습니다.FIRST 원칙 Keep it (F)ocused. Keep it (I..." }, { "title": "Vue.js 특징 살펴보기 Javascript와 비교하며(2)", "url": "/posts/Vue.js-2/", "categories": "frontend", "tags": "vue, vue.js, javascript", "date": "2020-10-29 23:06:00 +0900", "snippet": "지난번 포스팅 에서는 Vue와 Javascript를 비교하며 조건문, 반복문을 알아봤습니다. 오늘은 이벤트 핸들링, 양뱡향 데이터 바인딩을 알아보겠습니다.사용자 입력 핸들링v-on 이라는 뷰 디렉티브를 이용해 뷰 인스턴스에 이벤트 리스너를 추가 할 수 있습니다.&amp;lt;div id=&quot;app-5&quot;&amp;gt; &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;button v-on:click=&quot;reverseMessage&quot;&amp;gt;메시지 뒤집기&amp;..." }, { "title": "서버리스로 구현한 동영상 스트리밍 사이트", "url": "/posts/%EC%84%9C%EB%B2%84%EB%A6%AC%EC%8A%A4_%EA%B3%BC%EC%A0%9C_%EC%98%81%EC%83%81/", "categories": "serverless", "tags": "serverless, aws, lambda, s3, microservice, javascript", "date": "2020-10-28 02:21:00 +0900", "snippet": "동영상 서버리스 아키텍처서버리스란?aws 서버리스란? 서버리스는 운영상의 책임을 AWS로 전환하여 민첩성과 혁신을 높일 수 있도록 하는 클라우드의 네이티브 아키텍처입니다. 서버리스를 사용하면 서버를 고려하지 않고 애플리케이션과 서비스를 구축하고 실행할 수 있습니다. 서버 또는 클러스터 프로비저닝, 패치 적용, 운영 체제 유지 관리 및 용량 프로비저닝과 같은 인프라 관리 작업을 덜어냅니다. 거의 모든 유형의 애플리케이션 또는 백엔드 서비스를 서버리스로 구축할 수 있으며, 애플리케이션을 고가용성으로 실행하고 확장하는 데 필..." }, { "title": "Vue.js 특징 살펴보기 Javascript와 비교하며", "url": "/posts/Vue.js-1/", "categories": "frontend", "tags": "vue.js, javascript", "date": "2020-10-26 16:30:00 +0900", "snippet": "지난번 포스팅 에서는 Vue.js 설치방법을 알아봤습니다. 오늘도 cdn방식 설치가 되었다 가정하고 설명을 진행하겠습니다. 새로운 언어, 라이브러리, 프레임워크의 빠른 시작법을 알고 싶을 땐 공식문서가 최고입니다.Vue.js 한글공식문서 를 참고하여 작성했습니다. 이 포스팅은 Vue.js를 처음 시작하시고 javascript를 좀 아시는 분에게 Vue.js 인사이트를 맛보는게 도움이 될 것입니다.선언적 렌더링Vue.js의 핵심에는 간단한 템플릿 구문을 사용하여 DOM에서 데이터를 선언적으로 렌더링 할 수있는 시스템이 있습니다..." }, { "title": "AWS 개념 정리 (IAM 심화2)", "url": "/posts/AWS%EC%A0%95%EB%A6%AC-6/", "categories": "cloud", "tags": "aws, ec2, iam, user, group, role, policy", "date": "2020-10-25 01:36:00 +0900", "snippet": "AWS 정리인증? 인가?이전 포스팅에서 AWS IAM을 통한 사용자 관리 방식을 알아보고, 사용자 생성, 그룹 추가를 실습했습니다. 오늘은 사용자, 그룹, 역할, 정책의 관계를 알아보고 정책의 세가지 타입 각각 알아보겠습니다.AWS 모든 서비스들은 AWS API 기반에 있습니다. 그래서 API를 호출한 대상이 사용자, 애플리케이션, 서비스 등이 될 수 있는데 이들이 정당 호출자인지 인증을 해야 합니다. 그리고 AWS 서비스에 대해 어떤 권한을 가지고 있는지 파악할 필요가 있습니다.AWS API들은 인증키 (액세스키 + 시크릿 ..." }, { "title": "AWS 개념 정리 (IAM 심화1)", "url": "/posts/AWS%EC%A0%95%EB%A6%AC-5/", "categories": "cloud", "tags": "aws, ec2, iam, user, group, policy", "date": "2020-10-23 02:11:00 +0900", "snippet": "AWS 정리시작하기 전에IAM 개념 정리 포스팅 에서 간략하게 IAM이란 무엇인지, 일반적으로 어떻게 사용하는지 알아봤습니다. 오늘은 클라우드 서비스를 사용하다 보면 아무래도 보안, 인증, 인가 문제가 생기기 마련인데 이를 효과적으로 제어할 수 있는 방법이 무엇인지를 알아보고 배포 자동화의 기본이 되는 IAM에 대해서 보다 자세히 알아 보겠습니다.IAM 사용자사용자라 하면 우리 같은 개발자들도 콘솔을 통해 AWS 서비스 이용할 수 있는 권한을 받을 수 있고, 우리가 짠 코드, 서드파티, 서버 등 다양한 서비스도 사용자가 될 수..." }, { "title": "오토스케일링과 로드밸런서와 연결된 웹서버 구축하기(2)", "url": "/posts/AWS%EC%A0%95%EB%A6%AC-4/", "categories": "cloud", "tags": "aws, ec2, autoscaling, elasticloadbalancing, scaleout", "date": "2020-10-21 18:04:00 +0900", "snippet": "AWS 정리오토스케일링과 로드밸런서와 연결된 웹서버 구축하기(1)이전 포스팅에 이어서 시작하겠습니다.시작템플릿을 활용한 오토스케일링 그룹 생성오토스케일링이란 ? aws 사용자가 설정한 서버 증설 조건에 부합하면 자동으로 인스턴스(서버)를 생성해주는 서비스입니다. ec2 서비스에서 왼쪽 메뉴를 보면 오토스케일링 그룹을 클릭 한 뒤 “Auto Scaling 그룹 생성” 버튼을 눌러줍니다 CLOUD_EXERCISE 라는 이름을 주고, 시작 템플릿은 앞서 생성한 cloud-exercise-template을..." }, { "title": "오토스케일링과 로드밸런서와 연결된 웹서버 구축하기(1)", "url": "/posts/AWS%EC%A0%95%EB%A6%AC-3/", "categories": "cloud", "tags": "aws, ec2, autoscaling, elasticloadbalancing, scaleout", "date": "2020-10-20 18:04:00 +0900", "snippet": "AWS 정리서비스 아키텍처간략하게 그린 아키텍처는 위와 같습니다.사용자가 로드밸런서의 DNS 이름을 웹브라우저에 입력하면 오토 스케일링 그룹에 포함된 저희의 서버에 요청을 분배해줍니다. 오토 스케일링 그룹에 포함된 서버(인스턴스)들은 상황에 따라 증가나 감소할 수 있습니다.아키텍처 구축호스트네임을 반환하는 서버서버 이미지는 Nginx, Phusion Passenger 를 설치하는데 30분 ~ 1시간 시간이 소요되기에 미리 준비해두었습니다. 제가 준비한 서버는 public ip에 접속시 아래와 같은 간단한 코드로 호스트 네임을 ..." }, { "title": "오토스케일링(Autoscailing) 이란? ", "url": "/posts/AWS%EC%A0%95%EB%A6%AC-2/", "categories": "cloud", "tags": "aws, ec2, autoscaling, scaleup, scaleout", "date": "2020-10-19 15:41:00 +0900", "snippet": "AWS 정리오토스케일링사용하는 이유? 서버의 과부하, 장애 등과 같이 서비스 불능 상황 발생시 자동으로 서버를 복제하여 서버 대수를 늘려주는 작업을 해주는 AWS 서비스아마 클라우드를 공부하신 분이라면 온프레미스라는 용어를 들어 보셨을 겁니다. 클라우드 환경과 대조되는 말로써 기업, 스타트업이 물리적 서버를 직접 구축하여 활용하는 형태를 지칭합니다. 그렇다면 이런 방식의 단점은 무엇이 있을까요? 이 단점들이 오토스케일링과 무슨 상관이 있을까요?온프레미스의 단점 장비 유지보수비가 비싸다 서버 증설을 위한 작업이 까다롭다정리하..." }, { "title": "AWS 개념 정리 (IAM, EC2)편", "url": "/posts/AWS%EC%A0%95%EB%A6%AC-1/", "categories": "cloud", "tags": "aws, ec2, iam", "date": "2020-10-16 23:38:00 +0900", "snippet": "AWS 정리IAM처음 aws를 사용할때 보통 루트 계정으로 연습 겸 테스트용으로 사용합니다. 하지만 실제 서비스 운영시에는 , 네트워크를 구축한 상태에서 EC2, S3, RDS 등다양한 리소스를 개발자 유형 별로 접근 제어를 시킬 필요가 있는데 이럴 때 IAM을 사용합니다.IAM을 사용할 때에는 역할(Role), 정책(Policy)를 올바르게 구성하여 IAM사용자와 연결하는게 중요합니다. 간단히 얘기해서 역할은 여러 정책들을 포함시킴으로써 정의됩니다. 또한, 정책에는 aws 사용자 편의를 위해 크게 두가지 방식이 존재합니다. ..." }, { "title": "Vue.js 시작하기!", "url": "/posts/Vue.js-0/", "categories": "frontend", "tags": "vue, vuejs", "date": "2020-10-15 21:32:00 +0900", "snippet": "Vue.JS 시작하기프론트엔드 프레임워크를 시작하려는 이유?바닐라 JS로 MVC모델을 구현함으로써 프론트엔드를 작성하는 것은 원리를 이해하는데는 도움이 되지만, 빠르게 웹개발을 해야하는 상황에서는 적합하지 않습니다. 또한, 웹개발을 진행하는데 있어 장고, 스프링 같은 프레임워크들은 서버사이드렌더링을 지원하는 풀패키지 도구들이기 때문에 프론트엔드 개발이 서버 개발에 종속적이라는 단점도 존재했습니다. 이 단점은 전체 프로젝트를 지연시키기고 프로젝트의 품질 또한 낮추기 때문에 새로운 방법이 필요했습니다. 정답은 HTTP API 인터..." } ]
